import asyncio
import websockets
import json
import random

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
DEVICE_NAME = "esp01"
DEVICE_PASSWORD = "1234"
SERVER_URI = "ws://localhost:8765"
# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Nginx, —Ç–æ: "ws://your_domain.com/ws/"

async def run_mock_device():
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.
    """
    while True:
        try:
            async with websockets.connect(SERVER_URI) as websocket:
                print(f"[{DEVICE_NAME}] –ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {SERVER_URI}...")
                
                # 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                auth_payload = {
                    "type": "auth",
                    "name": DEVICE_NAME,
                    "password": DEVICE_PASSWORD
                }
                await websocket.send(json.dumps(auth_payload))
                
                response = await websocket.recv()
                response_data = json.loads(response)
                if response_data.get("status") != "ok":
                    print(f"[{DEVICE_NAME}] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response_data.get('message')}")
                    return

                print(f"[{DEVICE_NAME}] ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

                # 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∏ —Å–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                consumer_task = asyncio.create_task(listen_for_commands(websocket))
                producer_task = asyncio.create_task(send_telemetry(websocket))
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–µ—Ç—Å—è)
                done, pending = await asyncio.wait(
                    [consumer_task, producer_task],
                    return_when=asyncio.FIRST_COMPLETED,
                )
                
                for task in pending:
                    task.cancel()

        except (websockets.exceptions.ConnectionClosed, ConnectionRefusedError) as e:
            print(f"[{DEVICE_NAME}] ‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
        except Exception as e:
            print(f"[{DEVICE_NAME}] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)


async def listen_for_commands(websocket):
    """–°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
    async for message in websocket:
        command = json.loads(message)
        print(f"[{DEVICE_NAME}] üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã

async def send_telemetry(websocket):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥."""
    while True:
        telemetry_payload = {
            "type": "telemetry",
            "status": "idle",
            "battery": round(random.uniform(80.0, 100.0), 2),
            "temperature": round(random.uniform(20.0, 35.0), 2)
        }
        await websocket.send(json.dumps(telemetry_payload))
        print(f"[{DEVICE_NAME}] üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        await asyncio.sleep(10)


if __name__ == "__main__":
    try:
        asyncio.run(run_mock_device())
    except KeyboardInterrupt:
        print(f"\n[{DEVICE_NAME}] –ú–æ–∫-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
