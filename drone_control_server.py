"""
drone_control_server.py (Production-Ready Version)

–°–µ—Ä–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–∫—Å–∞–º–∏ –∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –¥—Ä–æ–Ω–æ–≤.
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (DeviceManager).
- –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º threading.Lock.
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Flask (sync) –∏ WebSocket (async).
- API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
"""
import os
import bcrypt
import asyncio
import threading
import json
import websockets
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_login import LoginManager, login_user, login_required, logout_user, current_user, UserMixin

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SECRET_KEY = os.environ.get('SECRET_KEY', 'supersecretkey-for-dev')
DATA_FILE = 'data.json'
WS_HOST = '0.0.0.0'
WS_PORT = 8765
FLASK_HOST = '0.0.0.0'
FLASK_PORT = 5000

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)
app.secret_key = SECRET_KEY

# --- Flask-Login ---
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# --- –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
class DeviceManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ø–∞–º—è—Ç–∏. –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω.
    """
    def __init__(self, device_config):
        self.lock = threading.Lock()
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö (–∏–º—è, –ø–∞—Ä–æ–ª—å)
        self.devices_config = {d['name']: d for d in device_config}
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å, —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è, websocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        self.clients = {}
        self.last_telemetry = {}
        self.statuses = {name: "offline" for name in self.devices_config}

    def get_device_config(self, name):
        return self.devices_config.get(name)

    def get_all_statuses(self):
        with self.lock:
            return list(self.statuses.items())

    def get_full_device_data(self):
        with self.lock:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            data = []
            for name, config in self.devices_config.items():
                device_data = config.copy()
                device_data['status'] = self.statuses.get(name, "offline")
                data.append(device_data)
            return data

    def set_online(self, name, websocket):
        with self.lock:
            self.clients[name] = websocket
            self.statuses[name] = "online"
        print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å")

    def set_offline(self, name):
        with self.lock:
            self.clients.pop(name, None)
            self.statuses[name] = "offline"
        print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å")

    def update_telemetry(self, name, telemetry_data):
        with self.lock:
            self.last_telemetry[name] = telemetry_data
            if 'status' in telemetry_data:
                self.statuses[name] = telemetry_data['status']
        print(f"üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç {name}: {telemetry_data.get('status', 'unknown')}")

    def get_telemetry(self, name):
        with self.lock:
            return self.last_telemetry.get(name, {"error": "no data for this device"})

    def get_websocket(self, name):
        with self.lock:
            return self.clients.get(name)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Ç–æ–∫–æ–≤ ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        initial_data = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    print(f"CRITICAL ERROR: Cannot load or parse {DATA_FILE}: {e}")
    exit(1)

device_manager = DeviceManager(initial_data['devices'])
users_data = {u['username']: u for u in initial_data['users']}
users_by_id = {str(u['id']): u for u in initial_data['users']}

# –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
websocket_event_loop = None

# --- –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class User(UserMixin):
    def __init__(self, id_, username):
        self.id = id_
        self.username = username

@login_manager.user_loader
def load_user(user_id):
    user_info = users_by_id.get(user_id)
    return User(user_info['id'], user_info['username']) if user_info else None

# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ---
@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password'].encode('utf-8')
        user_info = users_data.get(username)

        if user_info and bcrypt.checkpw(password, user_info['password_hash'].encode('utf-8')):
            login_user(User(user_info['id'], username))
            return redirect(url_for('index'))

        flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "error")
        return redirect(url_for('login'))
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# --- –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (HTML) ---
@app.route('/')
@login_required
def index():
    return render_template('index.html', username=current_user.username)

# --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (JSON) ---
@app.route('/api/devices', methods=['GET'])
@login_required
def get_devices_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º."""
    return jsonify(device_manager.get_full_device_data())

@app.route('/api/telemetry', methods=['GET'])
@login_required
def get_telemetry():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    device_name = request.args.get('device')
    if not device_name:
        return jsonify({"error": "device name is required"}), 400
    return jsonify(device_manager.get_telemetry(device_name))

@app.route('/api/send_command', methods=['POST'])
@login_required
def send_command_api():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —á–µ—Ä–µ–∑ WebSocket."""
    data = request.json
    name = data.get('device_name')
    command = data.get('command')
    value = data.get('value', None)

    if not name or not command:
        return jsonify({"status": "error", "message": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400

    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask
        future = asyncio.run_coroutine_threadsafe(
            send_command_to_device(name, command, value),
            websocket_event_loop
        )
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
        success = future.get(timeout=5)

        if success:
            return jsonify({"status": "ok", "message": f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É {name}"})
        else:
            return jsonify({"status": "error", "message": f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# --- WebSocket-—Å–µ—Ä–≤–µ—Ä ---
async def ws_handler(websocket):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ WebSocket."""
    device_name = None
    try:
        auth_message = await asyncio.wait_for(websocket.recv(), timeout=10.0)
        auth_data = json.loads(auth_message)

        if auth_data.get('type') != 'auth':
            await websocket.send(json.dumps({"error": "auth_required"}))
            return

        device_name = auth_data.get('name')
        password = auth_data.get('password')
        device_config = device_manager.get_device_config(device_name)

        if not device_config or device_config['password'] != password:
            await websocket.send(json.dumps({"error": "unauthorized"}))
            return

        device_manager.set_online(device_name, websocket)
        await websocket.send(json.dumps({"status": "ok", "message": "authenticated"}))

        async for message in websocket:
            data = json.loads(message)
            if data.get('type') == 'telemetry':
                device_manager.update_telemetry(device_name, data)

    except (websockets.exceptions.ConnectionClosed, asyncio.TimeoutError, json.JSONDecodeError) as e:
        print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {device_name or 'unknown device'} –∑–∞–∫—Ä—ã—Ç–æ: {type(e).__name__}")
    finally:
        if device_name:
            device_manager.set_offline(device_name)

async def send_command_to_device(name, command, value=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É."""
    ws = device_manager.get_websocket(name)
    if not ws:
        return False

    cmd_payload = {"command": command}
    if value is not None:
        cmd_payload["value"] = str(value)

    await ws.send(json.dumps(cmd_payload))
    return True

def start_websocket_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global websocket_event_loop
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    websocket_event_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(websocket_event_loop)

    server = websockets.serve(ws_handler, WS_HOST, WS_PORT)
    websocket_event_loop.run_until_complete(server)
    websocket_event_loop.run_forever()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    ws_thread = threading.Thread(target=start_websocket_server, daemon=True)
    ws_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Gunicorn: gunicorn --worker-class eventlet -w 1 drone_control_server:app
    print(f"Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{FLASK_HOST}:{FLASK_PORT}")
    print(f"WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{WS_HOST}:{WS_PORT}")
    app.run(host=FLASK_HOST, port=FLASK_PORT, debug=True)
